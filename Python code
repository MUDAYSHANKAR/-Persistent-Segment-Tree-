import sys

class PersistentSegmentTree:
    class Node:
        def __init__(self, val, left=None, right=None):
            self.val = val
            self.left = left
            self.right = right
            
    def __init__(self, initial_array, op=lambda a, b: a + b, identity=0):
        self.op = op
        self.identity = identity
        self.n = len(initial_array)
        self.roots = [self._build(initial_array, 0, self.n - 1)]

    def _build(self, arr, l, r):
        if l == r:
            return self.Node(arr[l])
        mid = (l + r) // 2
        left_child = self._build(arr, l, mid)
        right_child = self._build(arr, mid + 1, r)
        return self.Node(self.op(left_child.val, right_child.val), left_child, right_child)

    def _update(self, node, l, r, idx, value):
        if l == r:
            return self.Node(value)

        new_node = self.Node(self.identity, node.left, node.right)
        mid = (l + r) // 2
        if idx <= mid:
            new_node.left = self._update(node.left, l, mid, idx, value)
        else:
            new_node.right = self._update(node.right, mid + 1, r, idx, value)
        
        new_node.val = self.op(new_node.left.val, new_node.right.val)
        return new_node

    def _query(self, node, l, r, ql, qr):
        if not node or r < ql or l > qr:
            return self.identity
        if ql <= l and r <= qr:
            return node.val
        
        mid = (l + r) // 2
        left_res = self._query(node.left, l, mid, ql, qr)
        right_res = self._query(node.right, mid + 1, r, ql, qr)
        return self.op(left_res, right_res)

    def update(self, version, idx, value):
        if not (0 <= version < len(self.roots)):
            raise IndexError("Invalid version number.")
        if not (0 <= idx < self.n):
            raise IndexError("Index out of bounds.")
        
        new_root = self._update(self.roots[version], 0, self.n - 1, idx, value)
        self.roots.append(new_root)
        return len(self.roots) - 1
    
    def query(self, version, ql, qr):
        if not (0 <= version < len(self.roots)):
            raise IndexError("Invalid version number.")
        return self._query(self.roots[version], 0, self.n - 1, ql, qr)

if __name__ == "__main__":
    sys.setrecursionlimit(200000)

    initial_values = [1, 2, 3, 4, 5]
    pst = PersistentSegmentTree(initial_values)
    
    print("--- Initial State (Version 0) ---")
    print(f"Array: {initial_values}")
    print(f"Query on Version 0, range [1, 3] (sum of 2,3,4): {pst.query(0, 1, 3)}")
    print(f"Query on Version 0, range [0, 4] (sum of all): {pst.query(0, 0, 4)}")

    print("\n--- Update 1: Change index 2 from 3 to 10 ---")
    new_version_1 = pst.update(version=0, idx=2, value=10)
    print(f"New version created: Version {new_version_1}")
    
    print("\n--- Querying After Update 1 ---")
    print(f"Query on Version 0 (historical), range [1, 3]: {pst.query(0, 1, 3)}") # Should be unchanged
    print(f"Query on Version 1 (current), range [1, 3]: {pst.query(1, 1, 3)}") # Should reflect the change
    
    print("\n--- Update 2: Change index 4 from 5 to 0 ---")
    new_version_2 = pst.update(version=1, idx=4, value=0)
    print(f"New version created: Version {new_version_2}")

    print("\n--- Querying After Update 2 ---")
    print("Verifying all versions are accessible and correct:")
    # Version 0: [1, 2, 3, 4, 5] -> Sum [0,4] is 15
    print(f"Query on Version 0, range [0, 4]: {pst.query(0, 0, 4)}") 
    # Version 1: [1, 2, 10, 4, 5] -> Sum [0,4] is 22
    print(f"Query on Version 1, range [0, 4]: {pst.query(1, 0, 4)}")
    # Version 2: [1, 2, 10, 4, 0] -> Sum [0,4] is 17
    print(f"Query on Version 2, range [0, 4]: {pst.query(2, 0, 4)}")
